<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chaker Benhamed]]></title>
  <link href="http://blog.chaker.tn/atom.xml" rel="self"/>
  <link href="http://blog.chaker.tn/"/>
  <updated>2015-07-10T18:38:40+01:00</updated>
  <id>http://blog.chaker.tn/</id>
  <author>
    <name><![CDATA[Chaker Benhamed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Searching for APIs Keys in Github With Python]]></title>
    <link href="http://blog.chaker.tn/blog/searching-for-apis-keys-in-github-with-python/"/>
    <updated>2015-07-09T01:16:25+01:00</updated>
    <id>http://blog.chaker.tn/blog/searching-for-apis-keys-in-github-with-python</id>
    <content type="html"><![CDATA[<p>I was inspired by the this post <a href="http://raidersec.blogspot.com/2013/03/automatically-enumerating-google-api.html">&quot;Automatically Enumerating Google API Keys from Github Search&quot;</a> by <a href="http://jordan-wright.com/">Jordan Wright</a> the creator of <a href="https://github.com/jordan-wright/dumpmon">dumpmon</a>. In which he discuss how to &quot;harvest&quot; google api key from github.</p>

<!-- more -->

<p>How it works?</p>

<p>The <code>searchApiKey</code> function expect two parameters <code>keyword</code> and <code>regex</code>. 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">searchApiKey</span><span class="p">(</span><span class="n">keyword</span><span class="p">,</span> <span class="n">regex</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It use the <code>keyword</code> to search in Github. Then go through all 100 pages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;https://github.com/search?p={}&amp;q={}&amp;type=Code&amp;ref=searchresults&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">keyword</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here I run into problem since the code is formated in HTML so the regex won&#39;t work properly . 
<img src="http://blog.chaker.tn/images/googleapikey.png" title="&#34;Github html code&#34;" alt="&#34;Github html code&#34;"></p>

<p>For that I decided to fetch the url of every code snippet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span>  <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;a href=&quot;(.*?)&quot; title&#39;</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then transform it into the raw url. That we can apply the regex on it.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">raw</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">url</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;/blob&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
That&#39;s all now all we need is to prepare the regex and call the function. Here some regex that I used them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#couple of regexes:</span>
</span><span class='line'>
</span><span class='line'><span class="n">rotten</span> <span class="o">=</span> <span class="s">&quot;rottentomatoes+api&quot;</span>
</span><span class='line'><span class="n">rottenregex</span> <span class="o">=</span> <span class="s">&quot;api[-_]?key.*?[&#39;</span><span class="se">\&quot;</span><span class="s">]+(.{24})[&#39;</span><span class="se">\&quot;</span><span class="s">]&quot;</span>
</span><span class='line'><span class="c">#search_api_keys(rotten, rottenregex)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">twitter</span> <span class="o">=</span> <span class="s">&quot;consumer_key+twitte&quot;</span>
</span><span class='line'><span class="n">twitterregex</span> <span class="o">=</span> <span class="s">&#39;(sumer|ken).*?=.*?(</span><span class="se">\&#39;</span><span class="s">|&quot;)(.{20,50}?)(</span><span class="se">\&#39;</span><span class="s">|&quot;)&#39;</span>    <span class="c"># Need some work </span>
</span><span class='line'><span class="c">#search_api_keys(twitter, twitterregex)</span>
</span><span class='line'>
</span><span class='line'><span class="n">google</span> <span class="o">=</span> <span class="s">&quot;AIza+api&quot;</span>
</span><span class='line'><span class="n">googleregex</span> <span class="o">=</span> <span class="s">&quot;(AIza.{35})&quot;</span>
</span><span class='line'><span class="c">#search_api_keys(google, googleregex)</span>
</span><span class='line'>
</span><span class='line'><span class="n">tmdb</span> <span class="o">=</span> <span class="s">&quot;tmdb+api&quot;</span>
</span><span class='line'><span class="n">tmdbregex</span> <span class="o">=</span> <span class="s">&quot;((api[-_.]?key)|api).*?[ =&#39;</span><span class="se">\&quot;</span><span class="s">\(]*(.*?)[&#39;</span><span class="se">\&quot;</span><span class="s">\)]*$&quot;</span> <span class="c"># Need a lot of work</span>
</span><span class='line'><span class="c">#search_api_keys(tmdb, tmdbregex)</span>
</span></code></pre></td></tr></table></div></figure>

<p>For now this function will only get 10*100 results, But we can improve this. Github offer the possibility to search by language. So we can search for every programming language apart. This offer 10 time more results to try our regex (sometimes less it depends on the keyword). Jordan Wright discuss in his blog another way to get more results( you can check them <a href="http://raidersec.blogspot.com/2013/03/automatically-enumerating-google-api.html">here</a>). For me this is OK for now</p>

<p>Final result
<figure class='code'><figcaption><span>&quot;Final snippet&quot; (githubsearch.py)</span> <a href='http://blog.chaker.tn/gists/githubsearch.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">search<em>api</em>keys</span><span class="p">(</span><span class="n">keyword</span><span class="p">,</span> <span class="n">keyregex</span><span class="p">):</span>
</span><span class='line'>    <span class="n">numberOfKey</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">keyword</span><span class="o">+</span><span class="s">&quot;.txt&quot;</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">base</span> <span class="o">=</span><span class="s">&quot;https://raw.githubusercontent.com&quot;</span>
</span><span class='line'>        <span class="n">l</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;https://github.com/search?q={}&amp;type=Code&amp;ref=searchresults&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">keyword</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">language</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;&lt;a href=&quot;(.<em>?)&quot;.</em>?ter-item&quot;&gt;&#39;</span><span class="p">,</span><span class="n">l</span><span class="o">.</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">page</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>                <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">language</span> <span class="o">+</span> <span class="s">&quot;&amp;p={}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">page</span><span class="p">))</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span>  <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;a href=&quot;(.<em>?)&quot; title&#39;</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">text</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">raw</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">url</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;/blob&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">apikey</span> <span class="o">=</span>  <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">keyregex</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">I</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">apikey</span> <span class="o">!=</span> <span class="p">[]:</span>
</span><span class='line'>                        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">apikey</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">numberOfKey</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">numberOfKey</span> <span class="o">+</span> <span class="s">&quot;Keys has been found&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">rotten</span> <span class="o">=</span> <span class="s">&quot;rottentomatoes+api&quot;</span>
</span><span class='line'><span class="n">rottenregex</span> <span class="o">=</span> <span class="s">&quot;api[-_]?key.</em>?[&#39;</span><span class="se">&amp;quot;</span><span class="s">]+(.{24})[&#39;</span><span class="se">&amp;quot;</span><span class="s">]&quot;</span>
</span><span class='line'><span class="c">#search<em>api</em>keys(rotten, rottenregex)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">twitter</span> <span class="o">=</span> <span class="s">&quot;consumer<em>key+twitte&quot;</span>
</span><span class='line'><span class="n">twitterregex</span> <span class="o">=</span> <span class="s">&#39;(sumer|ken).<em>?=.</em>?(</span><span class="se">&amp;#39;</span><span class="s">|&quot;)(.{20,50}?)(</span><span class="se">&amp;#39;</span><span class="s">|&quot;)&#39;</span>
</span><span class='line'><span class="c">#search</em>api<em>keys(twitter, twitterregex)</span>
</span><span class='line'>
</span><span class='line'><span class="n">tmdb</span> <span class="o">=</span> <span class="s">&quot;tmdb+api&quot;</span>
</span><span class='line'><span class="n">tmdbregex</span> <span class="o">=</span> <span class="s">&quot;((api[-</em>.]?key)|api).<em>?[ =&#39;</span><span class="se">&amp;quot;</span><span class="s">(]</em>(.<em>?)[&#39;</span><span class="se">&amp;quot;</span><span class="s">)]</em>$&quot;</span>
</span><span class='line'><span class="c">#search<em>api</em>keys(tmdb, tmdbregex)</span>
</span><span class='line'>
</span><span class='line'><span class="n">google</span> <span class="o">=</span> <span class="s">&quot;AIza+api&quot;</span>
</span><span class='line'><span class="n">googleregex</span> <span class="o">=</span> <span class="s">&quot;(AIza.{35})&quot;</span>
</span><span class='line'><span class="n">search<em>api</em>keys</span><span class="p">(</span><span class="n">google</span><span class="p">,</span> <span class="n">googleregex</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>But why you didn&#39;t simply use Github API</p>

<p>Indeed Github is offering search in the API, But when I checked the <a href="https://developer.github.com/v3/search/">documentaion</a> I found out that you can only search for code inside specific repository. And that doesn&#39;t help us at all.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;Validation Failed&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;errors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;Must include at least one user, organization, or repository&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;resource&quot;</span><span class="p">:</span> <span class="s">&quot;Search&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;field&quot;</span><span class="p">:</span> <span class="s">&quot;q&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;code&quot;</span><span class="p">:</span> <span class="s">&quot;invalid&quot;</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Did Chose Octopress &amp; Github]]></title>
    <link href="http://blog.chaker.tn/blog/why-did-i-chose-octopress-and-github/"/>
    <updated>2015-07-08T11:22:34+01:00</updated>
    <id>http://blog.chaker.tn/blog/why-did-i-chose-octopress-and-github</id>
    <content type="html"><![CDATA[<h3>What&#39;s Octopress</h3>

<p><a href="http://octopress.org">Octopress</a> is &quot;A blogging framework for hackers&quot;. It&#39;s based on <a href="http://jekyllrb.com/">Jekyll</a> Which is ruby statics web generator. Octopress is for <strong>hackers</strong> so you should be familiar with shell and git commands or at least have the courage to try.</p>

<!-- more -->

<h3>Why github</h3>

<p>Github is offering service for hosting your <strong>static pages</strong> for free <a href="http://pages.github.com">Github Pages</a> powered by Jekyll under the hod. This helps you to deploy your Octopress blog easily. And git offers more flexible ways to manage your blog content.</p>

<h3>You didn&#39;t tell me why Octopress</h3>

<p>I chose Octopress for couple of reasons:</p>

<ul>
<li><a href="http://daringfireball.net/projects/markdown/">markdown</a>: posts in Octopress are written in markdown then transformed to HTML. And since I love to use it whenever it&#39;s possible (Github, Stackoverflow or writing emails), I found it convient to me.</li>
<li>sharing code: With Octopress sharing snippets of code is easier then ever.  Either with markdown or with <a href="http://octopress.org/docs/plugins/gist-tag/">gist tag</a></li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">something</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;markdown&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Gist: </p>

<div><script src='https://gist.github.com/a1bff4a8c2e8f0534645.js'></script>
<noscript><pre><code>print &quot;hello Gist&quot;</code></pre></noscript></div>

<ul>
<li>Git: deploying of Octopress help me to learn more on git (All I knew before was clone, pull and push). And the process of posting helps me understand branches and practice them.</li>
</ul>

<p>To be continued...</p>
]]></content>
  </entry>
  
</feed>
