<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chaker Benhamed]]></title>
  <link href="http://blog.chaker.tn/atom.xml" rel="self"/>
  <link href="http://blog.chaker.tn/"/>
  <updated>2015-07-14T15:37:57+01:00</updated>
  <id>http://blog.chaker.tn/</id>
  <author>
    <name><![CDATA[Chaker Benhamed]]></name>
    <email><![CDATA[mail@chaker.tn]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating Basic Proxy Checker With Python]]></title>
    <link href="http://blog.chaker.tn/blog/creating-basic-proxy-checker-with-python/"/>
    <updated>2015-07-12T11:03:54+01:00</updated>
    <id>http://blog.chaker.tn/blog/creating-basic-proxy-checker-with-python</id>
    <content type="html"><![CDATA[<p>I&#39;m in love with web scrapping but sometimes I get banned by the site that I wanna extract the data from. So the first and basic solution is to use proxies. However finding a working proxy in a proxy list is pain in the neck. That&#39;s why I decided to create my own &quot;basic&quot; proxy checker.</p>

<!-- more -->

<h2>The idea:</h2>

<p>It&#39;s very simple, all we going to do is to test our proxies:</p>

<ol>
<li>Test connectivity.</li>
<li>Test timeout.</li>
<li>Check if the proxy is returning the right page or not.</li>
</ol>

<h2>What I need:</h2>

<ul>
<li>Python: DAHH!!!</li>
<li>We gonna use <a href="http://docs.python-requests.org/en/latest/">requests</a> module for the HTTP requests. If you don&#39;t already have it you should take a look. And if you don&#39;t want to install it you can simply follow on but you have to adapt the function to your library of choice.</li>
<li>Proxy list to test. If you don&#39;t have one just google it.</li>
</ul>

<h2>Check a single proxy:</h2>

<p>First let&#39;s start by creating a function that test a single proxy. The function will load a webpage and returns False if there are error during the request. Then checks if the title is in the HTML or not and then returns the result.</p>

<figure class='code'><figcaption><span>Check single proxy </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">checkproxy</span><span class="p">(</span><span class="n">proxy</span><span class="p">,</span> <span class="n">timeout</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="s">&quot;http://example.com&quot;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;&lt;title&gt;Example Domain&lt;/title&gt;&quot;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">proxies</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;http&quot;</span> <span class="p">:</span> <span class="s">&quot;http://&quot;</span> <span class="o">+</span> <span class="n">proxy</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;https&quot;</span> <span class="p">:</span> <span class="s">&quot;https://&quot;</span> <span class="o">+</span><span class="n">proxy</span>
</span><span class='line'>            <span class="p">}</span> <span class="c"># Prepare the proxy</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">:</span> <span class="c"># Try to make a GET Request to URL.</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">proxies</span><span class="o">=</span><span class="n">proxies</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">:</span> <span class="c"># If any error occured (Including timeout) return False.</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">title</span> <span class="ow">in</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span> <span class="c"># Else check if title is in the HTML and return the result.</span>
</span></code></pre></td></tr></table></div></figure>

<p>By default this function will try to connect to <code>http://example.com</code> with a timeout of <code>5</code> seconds. If every thing passed OK it will check the presence of <code>&lt;title&gt;Example Domain&lt;/title&gt;</code> and returns the result. </p>

<p>OK Now we have a function that test if a given proxy is valid or not. But I want to check a proxy list? So we need to speed things up. Since checking every proxy aside will take time. We should try threads.</p>

<h2>Using threads:</h2>

<p>Checking a proxy list with a single thread is very slow. But implementing threaded solution to this problem is not quite straightforward. So I did a little search and I found <a href="http://stackoverflow.com/a/2635066/4237058">this</a>. And with some modification I ended up with this:</p>

<div><script src='https://gist.github.com/e47e21aa36995783b690.js'></script>
<noscript><pre><code>import requests
from threading import Thread
from Queue import Queue
import sys

def checkproxy(proxy, timeout = 5, url=&quot;http://example.com&quot;, title=&quot;&lt;title&gt;Example Domain&lt;/title&gt;&quot;):
    &quot;&quot;&quot;
    Return True if proxy is alive, False if not
    Usage :
    checkproxy(proxy)
    checkproxy(proxy,10,'http://google.com','&lt;title&gt;Google&lt;/title&gt;')
    &quot;&quot;&quot;
    proxies = {
            &quot;http&quot; : &quot;http://&quot; + proxy,
            &quot;https&quot; : &quot;https://&quot; +proxy
            }
    try :
        r = requests.get(url,proxies=proxies, timeout=timeout)
    except :
        return False
    return title in r.text


concurrent = 200

number_lines = 0
number_valid = 0

def doSomethingWithResult(status, proxy):
    global number_valid
    if status:
        print proxy
        number_valid +=1

def CheckProxyList():
    while True:
        proxy = q.get()
        status = checkproxy(proxy)
        doSomethingWithResult(status, proxy)
        q.task_done()


q = Queue(concurrent * 2)

for i in range(concurrent):
    t = Thread(target=CheckProxyList)
    t.daemon = True
    t.start()
try:
    for proxy in open('./proxylist.txt'):
        number_lines += 1
        q.put(proxy.strip())
    q.join()

    print &quot;[+] Checked {}&quot;.format(number_lines)
    print &quot;[+] Valid {}&quot;.format(number_valid)
except KeyboardInterrupt:
    print 
    print &quot;Exiting&quot;
    sys.exit(1)</code></pre></noscript></div>

<p>So I run it on on <code>6k</code> proxy list and It&#39;s reasonably fast. </p>

<p>This script will print the valid proxy to <code>stdout</code>. But it should be no problem to redirect it to file or to modify it to write it directly to a file. Feel free to modify and/or to use the script. And don&#39;t forget to comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searching for APIs Keys in Github With Python]]></title>
    <link href="http://blog.chaker.tn/blog/searching-for-apis-keys-in-github-with-python/"/>
    <updated>2015-07-09T01:16:25+01:00</updated>
    <id>http://blog.chaker.tn/blog/searching-for-apis-keys-in-github-with-python</id>
    <content type="html"><![CDATA[<p>I was inspired by the this post <a href="http://raidersec.blogspot.com/2013/03/automatically-enumerating-google-api.html">&quot;Automatically Enumerating Google API Keys from Github Search&quot;</a> by <a href="http://jordan-wright.com/">Jordan Wright</a> the creator of <a href="https://github.com/jordan-wright/dumpmon">dumpmon</a>. In which he discuss how to &quot;harvest&quot; google api key from github.</p>

<!-- more -->

<p>How it works?</p>

<p>The <code>searchApiKey</code> function expect two parameters <code>keyword</code> and <code>regex</code>. 
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">searchApiKey</span><span class="p">(</span><span class="n">keyword</span><span class="p">,</span> <span class="n">regex</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It use the <code>keyword</code> to search in Github. Then go through all 100 pages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;https://github.com/search?p={}&amp;q={}&amp;type=Code&amp;ref=searchresults&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">keyword</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here I run into problem since the code is formated in HTML so the regex won&#39;t work properly . 
<img src="http://blog.chaker.tn/images/googleapikey.png" title="&#34;Github html code&#34;" alt="&#34;Github html code&#34;"></p>

<p>For that I decided to fetch the url of every code snippet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span>  <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;a href=&quot;(.*?)&quot; title&#39;</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then transform it into the raw url. That we can apply the regex on it.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">raw</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">url</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;/blob&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
That&#39;s all now all we need is to prepare the regex and call the function. Here some regex that I used them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#couple of regexes:</span>
</span><span class='line'>
</span><span class='line'><span class="n">rotten</span> <span class="o">=</span> <span class="s">&quot;rottentomatoes+api&quot;</span>
</span><span class='line'><span class="n">rottenregex</span> <span class="o">=</span> <span class="s">&quot;api[-_]?key.*?[&#39;</span><span class="se">\&quot;</span><span class="s">]+(.{24})[&#39;</span><span class="se">\&quot;</span><span class="s">]&quot;</span>
</span><span class='line'><span class="c">#search_api_keys(rotten, rottenregex)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">twitter</span> <span class="o">=</span> <span class="s">&quot;consumer_key+twitte&quot;</span>
</span><span class='line'><span class="n">twitterregex</span> <span class="o">=</span> <span class="s">&#39;(sumer|ken).*?=.*?(</span><span class="se">\&#39;</span><span class="s">|&quot;)(.{20,50}?)(</span><span class="se">\&#39;</span><span class="s">|&quot;)&#39;</span>    <span class="c"># Need some work </span>
</span><span class='line'><span class="c">#search_api_keys(twitter, twitterregex)</span>
</span><span class='line'>
</span><span class='line'><span class="n">google</span> <span class="o">=</span> <span class="s">&quot;AIza+api&quot;</span>
</span><span class='line'><span class="n">googleregex</span> <span class="o">=</span> <span class="s">&quot;(AIza.{35})&quot;</span>
</span><span class='line'><span class="c">#search_api_keys(google, googleregex)</span>
</span><span class='line'>
</span><span class='line'><span class="n">tmdb</span> <span class="o">=</span> <span class="s">&quot;tmdb+api&quot;</span>
</span><span class='line'><span class="n">tmdbregex</span> <span class="o">=</span> <span class="s">&quot;((api[-_.]?key)|api).*?[ =&#39;</span><span class="se">\&quot;</span><span class="s">\(]*(.*?)[&#39;</span><span class="se">\&quot;</span><span class="s">\)]*$&quot;</span> <span class="c"># Need a lot of work</span>
</span><span class='line'><span class="c">#search_api_keys(tmdb, tmdbregex)</span>
</span></code></pre></td></tr></table></div></figure>

<p>For now this function will only get 10*100 results, But we can improve this. Github offer the possibility to search by language. So we can search for every programming language apart. This offer 10 time more results to try our regex (sometimes less it depends on the keyword). Jordan Wright discuss in his blog another way to get more results( you can check them <a href="http://raidersec.blogspot.com/2013/03/automatically-enumerating-google-api.html">here</a>). For me this is OK for now</p>

<p>Final result
<div><script src='https://gist.github.com/bbe2eabb0a7e33bf0c89.js'></script>
<noscript><pre><code>import requests
import re</p>

<p>def search<em>api</em>keys(keyword, keyregex):
    numberOfKey = 0
    with open(keyword+&quot;.txt&quot;, &quot;a&quot;) as f:
        base =&quot;https://raw.githubusercontent.com&quot;
        l = requests.get(&quot;https://github.com/search?q={}&amp;type=Code&amp;ref=searchresults&quot;.format(keyword))
        for language in re.findall(&#39;&lt;a href=&quot;(.<em>?)&quot;.</em>?ter-item&quot;&gt;&#39;,l.text):
            for page in range(1,100):
                req = requests.get(language + &quot;&amp;p={}&quot;.format(page))
                for url in  re.findall(&#39;a href=&quot;(.*?)&quot; title&#39;, req.text):
                    raw = base + url.replace(&quot;/blob&quot;, &quot;&quot;)
                    r = requests.get(raw)
                    apikey =  re.findall(keyregex, r.text, re.I)
                    if apikey != []:
                        f.write(apikey[0]+&quot;\n&quot;)
                        numberOfKey +=1
        print numberOfKey + &quot;Keys has been found&quot;        </p>

<p>rotten = &quot;rottentomatoes+api&quot;
rottenregex = &quot;api[-_]?key.*?[&#39;&amp;quot;]+(.{24})[&#39;&amp;quot;]&quot;</p>

<h1>search<em>api</em>keys(rotten, rottenregex)</h1>

<p>twitter = &quot;consumer_key+twitte&quot;
twitterregex = &#39;(sumer|ken).<em>?=.</em>?(\&#39;|&quot;)(.{20,50}?)(\&#39;|&quot;)&#39;</p>

<h1>search<em>api</em>keys(twitter, twitterregex)</h1>

<p>tmdb = &quot;tmdb+api&quot;
tmdbregex = &quot;((api[-_.]?key)|api).<em>?[ =&#39;&amp;quot;(]</em>(.<em>?)[&#39;&amp;quot;)]</em>$&quot;</p>

<h1>search<em>api</em>keys(tmdb, tmdbregex)</h1>

<p>google = &quot;AIza+api&quot;
googleregex = &quot;(AIza.{35})&quot;
search<em>api</em>keys(google, googleregex)
</code></pre></noscript></div></p>

<p>But why you didn&#39;t simply use Github API</p>

<p>Indeed Github is offering search in the API, But when I checked the <a href="https://developer.github.com/v3/search/">documentaion</a> I found out that you can only search for code inside specific repository. And that doesn&#39;t help us at all.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;Validation Failed&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;errors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;message&quot;</span><span class="p">:</span> <span class="s">&quot;Must include at least one user, organization, or repository&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;resource&quot;</span><span class="p">:</span> <span class="s">&quot;Search&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;field&quot;</span><span class="p">:</span> <span class="s">&quot;q&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;code&quot;</span><span class="p">:</span> <span class="s">&quot;invalid&quot;</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Did Chose Octopress &amp; Github]]></title>
    <link href="http://blog.chaker.tn/blog/why-did-i-chose-octopress-and-github/"/>
    <updated>2015-07-08T11:22:34+01:00</updated>
    <id>http://blog.chaker.tn/blog/why-did-i-chose-octopress-and-github</id>
    <content type="html"><![CDATA[<h2>What&#39;s Octopress</h2>

<p><a href="http://octopress.org">Octopress</a> is &quot;A blogging framework for hackers&quot;. It&#39;s based on <a href="http://jekyllrb.com/">Jekyll</a> Which is ruby statics web generator. Octopress is for <strong>hackers</strong> so you should be familiar with shell and git commands or at least have the courage to try.</p>

<!-- more -->

<h2>Why github</h2>

<p>Github is offering service for hosting your <strong>static pages</strong> for free <a href="http://pages.github.com">Github Pages</a> powered by Jekyll under the hod. This helps you to deploy your Octopress blog easily. And git offers more flexible ways to manage your blog content.</p>

<h2>You didn&#39;t tell me why Octopress</h2>

<p>I chose Octopress for couple of reasons:</p>

<ul>
<li><a href="http://daringfireball.net/projects/markdown/">markdown</a>: posts in Octopress are written in markdown then transformed to HTML. And since I love to use it whenever it&#39;s possible (Github, Stackoverflow or writing emails), I found it convient to me.</li>
<li>sharing code: With Octopress sharing snippets of code is easier then ever.  Either with markdown or with <a href="http://octopress.org/docs/plugins/gist-tag/">gist tag</a></li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">something</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;markdown&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<div><script src='https://gist.github.com/a1bff4a8c2e8f0534645.js'></script>
<noscript><pre><code>print &quot;hello Gist&quot;</code></pre></noscript></div>

<ul>
<li>Git: deploying of Octopress help me to learn more on git (All I knew before was clone, pull and push). And the process of posting helps me understand branches and practice them.</li>
</ul>

<h2>Theme:</h2>

<p>I&#39;m a big fun of <a href="https://github.com/octopress/solarized">solarized</a> theme I love to use it every place I can. However in octopress there are some problems with gists and markdown. So I decided to take a look on others <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">themes</a>. Until I found <a href="https://github.com/jez/hpstr-theme/">HPSTR</a>. This blog is now using HPSTR and I don&#39;t think that I will change it in the near future.</p>

<p>To be continued...</p>
]]></content>
  </entry>
  
</feed>
